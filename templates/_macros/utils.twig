{#
 |------------------------------------------------------------------------------
 | Format customAttributes Super Table field to a multidimensional array for the
 | CraftCMS Twig attr() function.
 |
 | @see https://docs.craftcms.com/v3/dev/functions.html#attr
 | @todo handle custom data-* attributes
 |------------------------------------------------------------------------------
#}
{% macro attr(attributes, customAttributes) %}
    {% if customAttributes|length %}
        {% for item in customAttributes %}
            {% set attrName, attrValue, a = item.attributeName, item.attributeValue, {} %}
            {# Format the attribute array to pass to CraftCMS attr() function #}
            {% switch attrName %}
                {% case 'style' %}
                    {# Split the style value statement every ';' found #}
                    {% set customStyles, allStyles = attrValue|split(';', -1), {} %}
                    {% for style in customStyles %}
                        {# Extract the name:value #}
                        {% set styleParts = style|split(':') %}
                        {% set allStyles = allStyles|merge({
                            (styleParts[0]|trim):styleParts[1]|trim })
                        %}
                    {% endfor %}
                    {% set a = { 'style': allStyles } %}
                {% case 'class' %}
                    {# Each class name are added to an array of strings #}
                    {% set a = { 'class' : [ attrValue ] } %}
                {% default %}
                    {# Defacto name:value array formatting #}
                    {% set a = { (attrName) : attrValue } %}
            {% endswitch %}

            {% if attributes[attrName] is defined %}
                {# Add the custom values to the existing array for the given key #}
                {% set subArray = { (attrName): attributes[attrName]|merge(a[attrName]) } %}
                {% set attributes = attributes|merge(subArray) %}
            {% else %}
                {# Add the custom values to the array with a new key #}
                {% set attributes = attributes|merge(a) %}
            {% endif %}

        {% endfor %}
    {% endif %}
    {# Output the html attributes #}
    {{ attr(attributes) }}
{% endmacro %}

{#
 |------------------------------------------------------------------------------
 | Output transformed image
 |------------------------------------------------------------------------------
#}
{% macro getTransformedImage(image, transform, class) %}
    {% if image %}
        {# Only transform if necessary #}
        {% if image.width > image.getWidth(transform) %}
            {% do image.setTransform(transform) %}
        {% endif %}
        {# Output the image #}
        <img src="{{ image.url }}"
            alt="{{ image.caption ?? image.title }}"
            class="{{ class }}"
            width="{{ image.width }}"
            height="{{ image.height }}">
    {% endif %}
{% endmacro %}

{#
 |------------------------------------------------------------------------------
 | Pagination for search
 |------------------------------------------------------------------------------
#}
{% macro pagination(pageInfo, nearbyPagesLimit = 4) %}
    {% set total = pageInfo.totalPages %}
    {% set current = pageInfo.currentPage %}
    {% spaceless %}
        {% if total > 1 %}
            <div class="row text-center">
                <ul class="pagination">
                {# Pagination Previous Button #}
                {% if pageInfo.prevUrl %}
                    <li><a href="{{ pageInfo.prevUrl }}" rel="prev">Previous</a></li>
                {% endif %}
                {% for i in 1..total %}
                    {% if 0 == (current - nearbyPagesLimit) - loop.index %}
                        <li><a href="{{ pageInfo.getPageUrl( 1 ) }}">1</a></li>
                        {% if 1 != loop.index %}
                            <li><span>…</span></li>
                        {% endif %}
                    {% elseif 0 == (current + nearbyPagesLimit) - loop.index  and (current + nearbyPagesLimit) < total %}
                        <li><span>…</span></li>
                    {% elseif 0 < (current - nearbyPagesLimit) - loop.index %}
                    {% elseif 0 > (current + nearbyPagesLimit) - loop.index %}
                    {% else %}
                        <li {{ current == loop.index ? 'class="active"' }}>
                            {% if current == loop.index  %}
                                <span>{{ loop.index }}</span>
                            {% else %}
                                <a href="{{ pageInfo.getPageUrl( loop.index ) }}">{{ loop.index }}</a>
                            {% endif %}
                        </li>
                    {% endif %}
                {% endfor %}
                {# Pagination Last Page Number #}
                {% if current != total  and (current + nearbyPagesLimit) < total %}
                    <li><a href="{{ pageInfo.getPageUrl( total ) }}">{{ total }}</a></li>
                {% endif %}
                {# Pagination Next Button #}
                {% if pageInfo.nextUrl %}
                    <li class="next"><a href="{{ pageInfo.nextUrl }}" rel="next">Next</a></li>
                {% endif %}
            </ul>
        </div>
        {% endif %}
    {% endspaceless %}
{% endmacro %}

{#
 |------------------------------------------------------------------------------
 | Make searching keyword bold and with a maximum of word for the summary
 |------------------------------------------------------------------------------
#}

{% macro setSummaryBold(entry, text, word, numWord = 70) %}
    {% set output = "" %}
    {% set texts = text|split(' ') %}
    {% set words = word|split(' ') %}

    {% if texts|length > numWord %}
        {% set firstMatchingWord = 0 %}
        {% set break = false %}
        {% for text in texts %}
            {# find first position of the word in array #}
            {% if words[0] in text|lower %}
                {% set firstMatchingWord = loop.index - 1 %}
                {% set break = true %}
            {% endif %}
        {% endfor %}

        {% set firstPeriod = 0 %}
        {% set break = false %}
        {# find first position of the last period before search keyword. This makes the summary nicer  #}
        {% for text in texts if not break %}
            {% if '.' in text %}
                {% set firstPeriod = loop.index %}
                {% if (firstMatchingWord - firstPeriod) < numWord %}
                    {% set firstPeriod = loop.index %}
                    {% set break = true %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {% for text in texts|slice(firstPeriod, numWord) %}
            {% set output = output ~ ' ' ~ text %}
        {% endfor %}

    {% else %}
        {% set output = texts|join(' ') %}
    {% endif %}
    {# Make the searching keyword bold #}
    {% set output = output|lower|replace(word|lower, '<strong>' ~ word ~ '</strong>') %}

    {# Output the summary with the updated date #}
    <p>{{ entry.dateUpdated|date() }}...{{ output|raw }}...</p>
{% endmacro %}


{% macro getPageBuilderBlockContent(entry, searchQuery) %}
    {% import _self as searchMacro %}
    {% set output = []  %}
    {% set findMatchWord = false %}
    {% for block in entry.pageBuilder.all() %}
        {# Check if element title had the search keyword #}
        {% if searchQuery in block.elementTitle|lower %}
            {% set findMatchWord = true %}
            {% set output = output|merge([block.elementTitle|striptags]) %}
        {% endif %}

        {% if block.redactor %}
            {% set output = output|merge([block.redactor|striptags('<p>')|replace({'<p>':'', '</p>':'\n' })]) %}
        {% endif %}

    {% endfor %}
    {{ searchMacro.setSummaryBold(entry, output|join(', '), searchQuery) }}
{% endmacro %}
